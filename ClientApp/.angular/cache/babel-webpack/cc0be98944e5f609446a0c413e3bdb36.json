{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { SyncExamService } from './sync-exam.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./sync-exam.service\";\nexport let ExamFactoryService = /*#__PURE__*/(() => {\n  class ExamFactoryService {\n    constructor(http, baseUrl, syncExamService) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n      this.syncExamService = syncExamService;\n    }\n\n    startExam(examId) {\n      return this.http.get(this.baseUrl + 'api/exam/start', {\n        params: {\n          id: examId.toString()\n        }\n      }).pipe(map(result => {\n        localStorage.setItem(\"pendingExam\", \"true\"); //This need to be done another way that local storage or it should be extended. \n\n        localStorage.setItem(\"examType\", \"sync\"); //TODO: implement in backend to return examType and write it to the local store item. \n\n        return result;\n      }), catchError(this.handleError));\n    }\n\n    getInstance() {\n      let examType = localStorage.getItem(\"examType\");\n      if (examType == \"sync\") return this.syncExamService;else throw Error(\"Unknown or empty exam type\");\n    }\n\n    handleError(error) {\n      if (error.status === 0) {\n        console.error('An error occurred:', error.error);\n      } else {\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n  }\n\n  ExamFactoryService.ɵfac = function ExamFactoryService_Factory(t) {\n    return new (t || ExamFactoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'), i0.ɵɵinject(i2.SyncExamService));\n  };\n\n  ExamFactoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExamFactoryService,\n    factory: ExamFactoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return ExamFactoryService;\n})();","map":null,"metadata":{},"sourceType":"module"}