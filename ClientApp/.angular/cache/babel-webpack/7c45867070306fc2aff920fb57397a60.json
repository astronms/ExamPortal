{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { Subject, throwError } from 'rxjs';\nimport { ExamStatusEnum } from '../enums/exam-status.enum';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SyncExamService = /*#__PURE__*/(() => {\n  class SyncExamService {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n      this.examStatusSubject = new Subject();\n      this.examStatusObservable = this.examStatusSubject.asObservable();\n    }\n\n    isPendingExam() {\n      return JSON.parse(localStorage.getItem(\"pendingExam\"));\n    }\n\n    getQuestion() {\n      return this.http.get(this.baseUrl + 'api/exam/getquestion').pipe(map(result => {\n        this.questionReply = result;\n        this.timeLeft = result.leftTime;\n        this.question = result.question;\n        this.setQuestionTimer();\n        return result.question;\n      }), catchError(this.handleError)); //ToDo: Catch 404 Response(Exam has been passed). \n    }\n\n    sendAnswers() {\n      this.finishExamIfNeeded();\n      this.http.get(this.baseUrl + \"api/exam/saveanswers\", {\n        params: {\n          id: this.question.id.toString()\n        }\n      }).subscribe(result => {}, error => {\n        console.log(error);\n      });\n    }\n\n    getLeftTime() {\n      return this.timeLeft;\n    }\n\n    setQuestionTimer() {\n      this.http.get(this.baseUrl + \"api/exam/timer\", {\n        params: {\n          id: this.question.id.toString()\n        }\n      }).subscribe(result => {\n        this.sendAnswers();\n        this.examStatusSubject.next(ExamStatusEnum.EndQuestionTime);\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    finishExamIfNeeded() {\n      if (this.questionReply.currentQuestionNumber == this.questionReply.examQuestionQuantity) {\n        this.examStatusSubject.next(ExamStatusEnum.Finished);\n        localStorage.removeItem(\"pendingExam\");\n      }\n    }\n\n    handleError(error) {\n      if (error.status === 0) {\n        console.error('An error occurred:', error.error);\n      } else {\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n  }\n\n  SyncExamService.ɵfac = function SyncExamService_Factory(t) {\n    return new (t || SyncExamService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n\n  SyncExamService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SyncExamService,\n    factory: SyncExamService.ɵfac,\n    providedIn: 'root'\n  });\n  return SyncExamService;\n})();","map":null,"metadata":{},"sourceType":"module"}