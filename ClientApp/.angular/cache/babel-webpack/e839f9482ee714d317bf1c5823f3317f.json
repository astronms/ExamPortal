{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, baseUrl, jwtHelper) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n      this.jwtHelper = jwtHelper;\n      this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n      this.user = this.userSubject.asObservable();\n    }\n\n    login(credentials) {\n      return this.http.post(this.baseUrl + 'api/auth/login', JSON.stringify(credentials), {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\"\n        })\n      }).pipe(map(user => {\n        localStorage.setItem('user', JSON.stringify(user));\n        this.userSubject.next(user);\n        return true;\n      }), catchError(this.handleError));\n    }\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n\n    isUserAuthenticated() {\n      if (this.userSubject.value) if (!this.jwtHelper.isTokenExpired(this.userSubject.value.token)) return true;\n      return false;\n    }\n    /*public getUserRole() : UserRole {\r\n      const token: string = localStorage.getItem(\"jwt\");\r\n      const decodedToken: { [key: string]: string }= jwt_decode(token);\r\n      console.log(decodedToken);\r\n      return UserRole.User;\r\n    }*/\n\n\n    logOut() {\n      localStorage.removeItem('user');\n      this.userSubject.next(null);\n    }\n\n    handleError(error) {\n      if (error.status === 0) {\n        console.error('An error occurred:', error.error);\n      } else {\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'), i0.ɵɵinject(i2.JwtHelperService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}